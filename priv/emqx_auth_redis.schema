%%-*- mode: erlang -*-
%% emqx_auth_redis config mapping

%% ------------------------------------------------------------------------------------------------
%%                                        auth redis
%% ------------------------------------------------------------------------------------------------

{mapping, "auth.redis.type", "emqx_auth_redis.server", [
  {default, single},
  {datatype, {enum, [single, sentinel, cluster]}}
]}.

{mapping, "auth.redis.server", "emqx_auth_redis.server", [
  {default, "127.0.0.1:6379"},
  {datatype, [string]}
]}.

{mapping, "auth.redis.sentinel", "emqx_auth_redis.server", [
  {default, ""},
  {datatype, string},
  hidden
]}.

{mapping, "auth.redis.pool", "emqx_auth_redis.server", [
  {default, 8},
  {datatype, integer}
]}.

{mapping, "auth.redis.database", "emqx_auth_redis.server", [
  {default, 0},
  {datatype, integer}
]}.

{mapping, "auth.redis.password", "emqx_auth_redis.server", [
  {default, ""},
  {datatype, string},
  hidden
]}.

{mapping, "auth.redis.ssl", "emqx_auth_redis.options", [
  {default, off},
  {datatype, flag}
]}.

{mapping, "auth.redis.cafile", "emqx_auth_redis.options", [
  {default, ""},
  {datatype, string}
]}.

{mapping, "auth.redis.certfile", "emqx_auth_redis.options", [
  {default, ""},
  {datatype, string}
]}.

{mapping, "auth.redis.keyfile", "emqx_auth_redis.options", [
  {default, ""},
  {datatype, string}
]}.

{translation, "emqx_auth_redis.options", fun(Conf) ->
   Ssl = cuttlefish:conf_get("auth.redis.ssl", Conf, false),
   case Ssl of
       true ->
            CA = cuttlefish:conf_get("auth.redis.cafile", Conf),
            Cert = cuttlefish:conf_get("auth.redis.certfile", Conf),
            Key = cuttlefish:conf_get("auth.redis.keyfile", Conf),
            [{options, [{ssl_options, [{cacertfile, CA},
                                       {certfile, Cert},
                                       {keyfile, Key}]}]}];
       _ -> [{options, []}]
   end
end}.

{translation, "emqx_auth_redis.server", fun(Conf) ->
  Fun = fun(S) ->
    case string:split(S, ":", trailing) of
      [Domain]       -> {Domain, 6379};
      [Domain, Port] -> {Domain, list_to_integer(Port)}
    end
  end,
  Servers = cuttlefish:conf_get("auth.redis.server", Conf),
  Type = cuttlefish:conf_get("auth.redis.type", Conf),
  Server = case Type of
    single ->
      {Host, Port} = Fun(Servers),
      [{host, Host}, {port, Port}];
    _ ->
      S = string:tokens(Servers, ","),
      [{servers, [Fun(S1) || S1 <- S]}]
  end,
  Pool = cuttlefish:conf_get("auth.redis.pool", Conf),
  Passwd = cuttlefish:conf_get("auth.redis.password", Conf),
  DB = cuttlefish:conf_get("auth.redis.database", Conf),
  Sentinel = cuttlefish:conf_get("auth.redis.sentinel", Conf),
  [{type, Type},
   {pool_size, Pool},
   {auto_reconnect, 1},
   {database, DB},
   {password, Passwd},
   {sentinel, Sentinel}] ++ Server
end}.

{mapping, "auth.redis.query_timeout", "emqx_auth_redis.query_timeout", [
  {default, ""},
  {datatype, string}
]}.

{translation, "emqx_auth_redis.query_timeout", fun(Conf) ->
  case cuttlefish:conf_get("auth.redis.query_timeout", Conf) of
      "" -> infinity;
      Duration ->
          case cuttlefish_duration:parse(Duration, ms) of
              {error, Reason} -> error(Reason);
              Ms when is_integer(Ms) -> Ms
          end
  end
end}.

{mapping, "auth.redis.auth_cmd", "emqx_auth_redis.auth_cmd", [
  {datatype, string}
]}.

{mapping, "auth.redis.password_hash", "emqx_auth_redis.password_hash", [
  {datatype, string}
]}.

{mapping, "auth.redis.super_cmd", "emqx_auth_redis.super_cmd", [
  {datatype, string}
]}.

{mapping, "auth.redis.super_account", "emqx_auth_redis.super_account", [
  {datatype, string},
  {default, ""}
]}.

{mapping, "auth.redis.super_password", "emqx_auth_redis.super_password", [
  {datatype, string},
  {default, ""}
]}.

{mapping, "auth.redis.acl_cmd", "emqx_auth_redis.acl_cmd", [
  {datatype, string}
]}.

{translation, "emqx_auth_redis.super_account", fun(Conf) -> V = cuttlefish:conf_get("auth.redis.super_account", Conf), list_to_binary(string:trim(V)) end}.
{translation, "emqx_auth_redis.super_password", fun(Conf) -> V = cuttlefish:conf_get("auth.redis.super_password", Conf), list_to_binary(string:trim(V)) end}.
{translation, "emqx_auth_redis.password_hash", fun(Conf) ->
  HashValue = cuttlefish:conf_get("auth.redis.password_hash", Conf),
  case string:tokens(HashValue, ",") of
    [Hash]           -> list_to_atom(Hash);
    [Prefix, Suffix] -> {list_to_atom(Prefix), list_to_atom(Suffix)};
    [Hash, MacFun, Iterations, Dklen] -> {list_to_atom(Hash), list_to_atom(MacFun), list_to_integer(Iterations), list_to_integer(Dklen)};
    _                -> plain
  end
end}.

%% ------------------------------------------------------------------------------------------------
%%                                        web hook 
%% ------------------------------------------------------------------------------------------------


% {mapping, "auth.redis.url", "emqx_auth_redis.url", [
%   {datatype, string}
% ]}.
% 
% {mapping, "auth.redis.auth_path", "emqx_auth_redis.auth_path", [
%   {datatype, string}
% ]}.
% 
% {mapping, "auth.redis.acl_path", "emqx_auth_redis.acl_path", [
%   {datatype, string}
% ]}.
% 
% {mapping, "auth.redis.ssl.web_cafile", "emqx_auth_redis.web_cafile", [
%   {default, ""},
%   {datatype, string}
% ]}.
% 
% {mapping, "auth.redis.ssl.web_certfile", "emqx_auth_redis.web_certfile", [
%   {default, ""},
%   {datatype, string}
% ]}.
% 
% {mapping, "auth.redis.ssl.web_keyfile", "emqx_auth_redis.web_keyfile", [
%   {default, ""},
%   {datatype, string}
% ]}.
% 
% {mapping, "auth.redis.ssl.web_verify", "emqx_auth_redis.web_verify", [
%   {default, false},
%   {datatype, {enum, [true, false]}}
% ]}.
% 
% {mapping, "auth.redis.encode_payload", "emqx_auth_redis.encode_payload", [
%   {default, undefined},
%   {datatype, {enum, [base62, base64]}}
% ]}.
% 
% {mapping, "auth.redis.web_pool_size", "emqx_auth_redis.web_pool_size", [
%    {default, 32},
%    {datatype, integer}
%  ]}.
% 
% {mapping, "auth.redis.headers.$name", "emqx_auth_redis.headers", [
%   {datatype, string}
% ]}.
% 
% {translation, "emqx_auth_redis.headers", fun(Conf) ->
%   Headers = cuttlefish_variable:filter_by_prefix("auth.redis.headers", Conf),
%   Trans = fun ("authorization", V) -> {<<"Authorization">>, list_to_binary(string:trim(V))};
%               (K, V)  -> {list_to_binary(string:trim(K)), list_to_binary(string:trim(V))}
%           end,
%   %% [Trans(K, V) || {[_, _, _, K], V} <- Headers, K =/= "authorization"]
%   %% make sure no authorization http header
%   [{list_to_binary(string:trim(K)), list_to_binary(string:trim(V))} || {[_, _, _, K], V} <- Headers, K =/= "authorization"]
% end}.


%% ------------------------------------------------------------------------------------------------
%%                                         http client 
%% ------------------------------------------------------------------------------------------------
{mapping, "auth.http.auth_req", "emqx_auth_redis.auth_req", [
  {datatype, string}
]}.

{mapping, "auth.http.auth_req.method", "emqx_auth_redis.auth_req", [
  {default, post},
  {datatype, {enum, [post, get]}}
]}.

{mapping, "auth.http.auth_req.content_type", "emqx_auth_redis.auth_req", [
  {default, 'x-www-form-urlencoded'},
  {datatype, {enum, ['json', 'x-www-form-urlencoded']}}
]}.

{mapping, "auth.http.auth_req.params", "emqx_auth_redis.auth_req", [
  {datatype, string}
]}.

{translation, "emqx_auth_redis.auth_req", fun(Conf) ->
  case cuttlefish:conf_get("auth.http.auth_req", Conf) of
    undefined -> cuttlefish:unset();
    Url ->
      Params = cuttlefish:conf_get("auth.http.auth_req.params", Conf),
      [{url, Url},
      {method, cuttlefish:conf_get("auth.http.auth_req.method", Conf)},
      {content_type, list_to_binary("application/" ++ atom_to_list(cuttlefish:conf_get("auth.http.auth_req.content_type", Conf)))},
      {params, [list_to_tuple(string:tokens(S, "=")) || S <- string:tokens(Params, ",")]}]
  end
end}.

{mapping, "auth.http.acl_req", "emqx_auth_redis.acl_req", [
  {default, undefined},
  {datatype, string}
]}.

{mapping, "auth.http.acl_req.method", "emqx_auth_redis.acl_req", [
  {default, post},
  {datatype, {enum, [post, get]}}
]}.

{mapping, "auth.http.acl_req.content_type", "emqx_auth_redis.acl_req", [
  {default, 'x-www-form-urlencoded'},
  {datatype, {enum, ['json', 'x-www-form-urlencoded']}}
]}.

{mapping, "auth.http.acl_req.params", "emqx_auth_redis.acl_req", [
  {datatype, string}
]}.

{translation, "emqx_auth_redis.acl_req", fun(Conf) ->
  case cuttlefish:conf_get("auth.http.acl_req", Conf, undefined) of
    undefined -> cuttlefish:unset();
    Url -> Params = cuttlefish:conf_get("auth.http.acl_req.params", Conf),
           [{url, Url},
            {method, cuttlefish:conf_get("auth.http.acl_req.method", Conf)},
            {content_type, list_to_binary("application/" ++ atom_to_list(cuttlefish:conf_get("auth.http.acl_req.content_type", Conf)))},
            {params, [list_to_tuple(string:tokens(S, "=")) || S <- string:tokens(Params, ",")]}]
  end
end}.

{mapping, "auth.http.request.timeout", "emqx_auth_redis.request_timeout", [
  {default, "5s"},
  {datatype, [integer, {duration, ms}]}
]}.

{mapping, "auth.http.pool_size", "emqx_auth_redis.pool_opts", [
  {default, 8},
  {datatype, integer}
]}.

{mapping, "auth.http.request.connect_timeout", "emqx_auth_redis.pool_opts", [
  {default, "5s"},
  {datatype, [integer, {duration, ms}]}
]}.

{mapping, "auth.http.ssl.cacertfile", "emqx_auth_redis.pool_opts", [
  {datatype, string}
]}.

{mapping, "auth.http.ssl.certfile", "emqx_auth_redis.pool_opts", [
  {datatype, string}
]}.

{mapping, "auth.http.ssl.keyfile", "emqx_auth_redis.pool_opts", [
  {datatype, string}
]}.

{mapping, "auth.http.request.retry_times", "emqx_auth_redis.pool_opts", [
  {default, 5},
  {datatype, integer}
]}.

{mapping, "auth.http.request.retry_interval", "emqx_auth_redis.pool_opts", [
  {default, "1s"},
  {datatype, {duration, ms}}
]}.

{mapping, "auth.http.request.retry_backoff", "emqx_auth_redis.pool_opts", [
  {default, 2.0},
  {datatype, float}
]}.

{translation, "emqx_auth_redis.pool_opts", fun(Conf) ->
  Filter = fun(L) -> [{K, V} || {K, V} <- L, V =/= undefined] end,
  InfinityFun = fun(0) -> infinity;
                   (Duration) -> Duration
                end,
  SslOpts = Filter([{cacertfile, cuttlefish:conf_get("auth.http.ssl.cacertfile", Conf, undefined)},
                    {certfile, cuttlefish:conf_get("auth.http.ssl.certfile", Conf, undefined)},
                    {keyfile, cuttlefish:conf_get("auth.http.ssl.keyfile", Conf, undefined)}]),
  Opts = [{pool_size, cuttlefish:conf_get("auth.http.pool_size", Conf)},
          {connect_timeout, InfinityFun(cuttlefish:conf_get("auth.http.request.connect_timeout", Conf))},
          {retry, cuttlefish:conf_get("auth.http.request.retry_times", Conf)},
          {retry_timeout, cuttlefish:conf_get("auth.http.request.retry_interval", Conf)}],
  case SslOpts of
      [] -> Filter(Opts);
      _  ->
          TlsVers = ['tlsv1.2','tlsv1.1',tlsv1],
          DefaultOpts = [{versions, TlsVers},
                         {ciphers, lists:foldl(
                                       fun(TlsVer, Ciphers) ->
                                           Ciphers ++ ssl:cipher_suites(all, TlsVer)
                                       end, [], TlsVers)}],
          Filter([{ssl, DefaultOpts ++ SslOpts} | Opts])
  end
end}.


{mapping, "auth.http.header.$field", "emqx_auth_redis.headers", [
  {datatype, string}
]}.

{translation, "emqx_auth_redis.headers", fun(Conf) ->
  lists:map(
      fun({["auth", "http", "header", Field], Value}) ->
          {Field, Value}
      end,
      cuttlefish_variable:filter_by_prefix("auth.http.header", Conf))
end}.

